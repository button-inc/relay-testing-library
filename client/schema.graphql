"""All input for the create `Todo` mutation."""
input CreateTodoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Todo` to be created by this mutation."""
  todo: TodoInput!
}

"""The output of our create `Todo` mutation."""
type CreateTodoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Todo` that was created by this mutation."""
  todo: Todo

  """An edge for our `Todo`. May be used by Relay 1."""
  todoEdge(
    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteTodoByRowId` mutation."""
input DeleteTodoByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteTodo` mutation."""
input DeleteTodoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Todo` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Todo` mutation."""
type DeleteTodoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTodoId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Todo` that was deleted by this mutation."""
  todo: Todo

  """An edge for our `Todo`. May be used by Relay 1."""
  todoEdge(
    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosEdge
}

"""All input for the `insertTodo` mutation."""
input InsertTodoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  completed: Boolean
  task: String
}

"""The output of our `insertTodo` mutation."""
type InsertTodoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Todo`."""
  createTodo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTodoInput!
  ): CreateTodoPayload

  """Deletes a single `Todo` using its globally unique id."""
  deleteTodo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoInput!
  ): DeleteTodoPayload

  """Deletes a single `Todo` using a unique key."""
  deleteTodoByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoByRowIdInput!
  ): DeleteTodoPayload
  insertTodo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InsertTodoInput!
  ): InsertTodoPayload

  """Updates a single `Todo` using its globally unique id and a patch."""
  updateTodo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoInput!
  ): UpdateTodoPayload

  """Updates a single `Todo` using a unique key and a patch."""
  updateTodoByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoByRowIdInput!
  ): UpdateTodoPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Todo`."""
  allTodos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosConnection

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Todo` using its globally unique `ID`."""
  todo(
    """The globally unique `ID` to be used in selecting a single `Todo`."""
    id: ID!
  ): Todo
  todoByRowId(rowId: Int!): Todo
}

type Todo implements Node {
  completed: Boolean!
  dateCreated: Datetime!
  dateUpdated: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  task: String!
}

"""
A condition to be used against `Todo` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TodoCondition {
  """Checks for equality with the object’s `completed` field."""
  completed: Boolean

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateUpdated` field."""
  dateUpdated: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `task` field."""
  task: String
}

"""An input for mutations affecting `Todo`"""
input TodoInput {
  completed: Boolean
  dateCreated: Datetime
  dateUpdated: Datetime
  task: String!
}

"""Represents an update to a `Todo`. Fields that are set will be updated."""
input TodoPatch {
  completed: Boolean
  dateCreated: Datetime
  dateUpdated: Datetime
  task: String
}

"""A connection to a list of `Todo` values."""
type TodosConnection {
  """
  A list of edges which contains the `Todo` and cursor to aid in pagination.
  """
  edges: [TodosEdge!]!

  """A list of `Todo` objects."""
  nodes: [Todo]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Todo` you could get from the connection."""
  totalCount: Int!
}

"""A `Todo` edge in the connection."""
type TodosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Todo` at the end of the edge."""
  node: Todo
}

"""Methods to use when ordering `Todo`."""
enum TodosOrderBy {
  COMPLETED_ASC
  COMPLETED_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_UPDATED_ASC
  DATE_UPDATED_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TASK_ASC
  TASK_DESC
}

"""All input for the `updateTodoByRowId` mutation."""
input UpdateTodoByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!

  """
  An object where the defined keys will be set on the `Todo` being updated.
  """
  todoPatch: TodoPatch!
}

"""All input for the `updateTodo` mutation."""
input UpdateTodoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Todo` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Todo` being updated.
  """
  todoPatch: TodoPatch!
}

"""The output of our update `Todo` mutation."""
type UpdateTodoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Todo` that was updated by this mutation."""
  todo: Todo

  """An edge for our `Todo`. May be used by Relay 1."""
  todoEdge(
    """The method to use when ordering `Todo`."""
    orderBy: [TodosOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodosEdge
}
